cokescript = require("../dist/cokescript")
assert = require("assert")
vm = require("vm")

def gen(source)
  return cokescript.generateModule(source).code.trim()

def exe(js, context)
  try
    return vm.runInNewContext(js, context)
  catch(e)
    throw "JS error\n#{js}"

describe("CokeScript features test suite", def()
  
  it("Simple function", def()
    code = gen("def test() 1")
    assert.equal(code, "function test() { return 1; };")
    assert.equal(exe(code), undefined)
    code = gen("def test()
  1")
    assert.equal(code, "function test() {\n  1;\n};")
    assert.equal(exe(code), undefined)
  )

  it("Function call", def()
    def test
      return 1
    assert.equal(test(), 1)
  )

  it("Lambda", def
    assert.equal((def 1 + 1)(), 2)
  )

  it("Function addition", def()
    code = gen("def test() 1 + 3\ntest()")
    assert.equal(exe(code), 4)
  )
  
  it("Function params indentation", def()
    def test(a, b, c, d, e)
      return a + b + c + d + e
    
    assert.equal(test(1,
        2, 3,
        4,
      5),
    15)
  )
  
  it("String interpolation", def()
    def test(alpha, beta)
      return "hello #{alpha} world #{beta}"
    assert.equal(test(1, 2), "hello 1 world 2")
    toto = {tata: 42}
    assert.equal("something #{toto.tata} something", "something 42 something")
    
    code = gen("\"\#{test}\"") # for coverage
    assert.equal(exe(code, {test: 42}), "42")
  )
  
  it("Return an array", def()
    def test(a=1, b, c="test")
      return [a, b, c]
    assert.deepEqual(test(undefined, 3), [1, 3, "test"])
  )
  
  it("Return an object", def()
    def test(a=1, b, c="test")
      return {a: a, b: b, c: c}
    test(undefined, 3)
    assert.deepEqual(test(undefined, 3), {a: 1, b: 3, c: "test"})
  )
  
  it("Multiline string", def()
    a = "hello
hello"
    assert.equal(a, "hello\nhello")
  )
  
  it("Multiline interpolated string", def()
    w = 1
    x = 2
    y = 3
    a = "hello #{w}
hello #{x}
hello #{y}"
    assert.equal(a, "hello 1\nhello 2\nhello 3")
  )
  
  it("If else elseif", def()
    def test_if(a)
      if a == 0
        return 1
      elseif a == 10
        return 20
      else
        return 42
    assert.equal(test_if(0), 1)
    assert.equal(test_if(10), 20)
    assert.equal(test_if(20), 42)
  )
  
  it("For loop", def()
    code = gen("for k, v in array\n  array[k] = v * v\narray")
    assert.deepEqual(exe(code, {array: [1, 2, 3]}), [1, 4, 9])
  )
  
  it("Class", def()
    code = gen("class Test\n  def constructor()\n    this.a = 1\nb = Test()\nb.a")
    assert.deepEqual(exe(code, {}), 1)
  )
  
  it("Invalid syntax", def()
    t = def test() gen("a=1")
    assert.throws(t, Error)
  )
  
  it("Invalid token", def()
    t = def test() gen("a = 1;")
    assert.throws(t, Error)
  )
  
  it("Comments", def()
    code = gen("# nothing\n1 # nothing")
    assert.equal(exe(code, {}), 1)
  )
  
  it("Array syntax on several lines", def()
    code = gen("[1, 2, 3]")
    assert.deepEqual(exe(code), [1, 2, 3])
    code = gen("[\n  1,\n  2,\n  3]")
    assert.deepEqual(exe(code), [1, 2, 3])
  )
  
  it("DOM", def()
    def h(n, p, c) {n: n, p: p, c: c}
    dom makeDom(list)
      for item in list
        <li className="cls#{item}">
          =item
    assert.deepEqual(makeDom([1, 2, 3])[0], 
      {
        n: "li",
        c: ["1"], 
        p: {className: "cls1"}
      }
    )
  )
  
  it("Function call accept function def", def()
    code = gen("
test(1, def toto()
  return 42
, 1)")
    context = {test: def(a, b, c) b()}
    assert.equal(exe(code, context), 42)
  )

  it("Object function def", def()
    code = gen("
a = {a: def test()
  return 42
}
a.a()")
    assert.equal(exe(code), 42)
    code = gen("
a = {
  a: def test()
    return 43
}
a.a()")
    assert.equal(exe(code), 43)
    code = gen("
a = {
    a: def test()
      return 44
    , c: 1
}
a.a()")
    assert.equal(exe(code), 44)
  )

  it("Array and whitspace", def()
    a = [
      1, 2,
      5
    ]
    a = [
      1]
    a = [1,
      2, 3,
    2]
    a = [1, 3,
      2]
    
  )

  it("Object and whitspace", def()
    o = {
      a: 1, b: 2,
      c: 5
    }
    o = {c: 2,
      a: 1, b: 2,
    c: 5}
  )

  it("While loop", def()
    n = 5
    while n > 0
      n = n - 1
    assert.equal(n, 0)
  )

  it("For loop", def()
    array = [1, 2, 3]
    array2 = []
    for index, value in array
      array2[index] = value * value
    assert.deepEqual(array2, [1, 4, 9])
  )
  
  it("Strict comparison", def()
    code = gen("23 == \"23\"")
    assert.equal(exe(code, {}), false)
    code = gen("23 == 23")
    assert.equal(exe(code, {}), true)
    code = gen("23 != \"23\"")
    assert.equal(exe(code, {}), true)
  )
  
  it("Regular expression", def()
    code = gen("\"abc\".match(/abc/)")
    assert.equal(exe(code, {})[0], "abc")
    code = gen("\"a\/bc\".match(/a\\\/bc/)")
    assert.equal(exe(code, {})[0], "a\/bc")
  )
)
